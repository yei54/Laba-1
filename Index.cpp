#include "Drobina.h"


void main()
{
	setlocale(LC_ALL, "Rus");
	static int Size = 0; // размер массива
	static int Counter = 0; // число объектов
	cout << "Введите размер массива объектов, затем Enter.\n";
	cin >> Size;
	Drobina *p_List = new Drobina[Size];
	system("cls");


	char c = 0;
	while (c != '0')
	{
		cout << endl << endl << "1. Добавить дробь." << endl;
		cout << endl << endl << "2. Изменить дробь." << endl;
		cout << endl << endl << "3. Показать все дроби." << endl;
		cout << endl << endl << "4. Сократить дробь." << endl;
		cout << endl << endl << "5. Умножить дроби." << endl;
		cout << endl << endl << "6. Разделить дроби." << endl;
		cout << endl << endl << "7. Удалить дробь." << endl;
		cout << endl << "0. Выход." << endl << endl;

		cin >> c;
		system("cls");
		switch (c)
		{
		case '1':
			if(Counter < Size)
			{
				int Cislit;
				int Znamen;
				cout << "Введите числитель 'пробел' знаменатель, нажмите Enter" << endl;
				cin >> Cislit >> Znamen;

				if (Znamen != 0)
				{
					p_List[Counter].Change(Cislit, Znamen);
					Counter++;
				}
				else
				{
					cout << "Знаменатель не может быть 0" << endl;
					Sleep(2000);
					system("cls");
				}
				system("cls");
				break;
			}
			else
			{
				cout << "Список полон. Дробь не создана! " << endl;
				Sleep(2000);
				system("cls");
				break;
			}
		case '2':
			int edit;
			cout << "Введите номер изменяемого объекта, от 0 до " << Counter << ", нажмите Enter" << endl;
			cin >> edit;
			system("cls");
			int Cislit;
			int Znamen;
			cout << "Введите числитель 'пробел' знаменатель, нажмите Enter" << endl;
			cin >> Cislit >> Znamen;
			p_List[edit].Change(Cislit, Znamen);
			break;
		case '3':
				
				for (int i = 0; i < Size; i++)
				{
					p_List[i].Show();
				}
				
			break;
		case '4':
			int index;
			cout << "Сокращение дроби, введите номер сокращаемой дроби, от 1 до " << Counter << ", нажмите Enter" << endl;
			cin >> index;
			p_List[(index - 1)].Show();
			cout << ">>\t";
			p_List[(index - 1)].Sokratit();
			p_List[(index - 1)].Show();

			Sleep(2000);
			system("cls");
			break;
		case '5':
			int first;
			int second;
			cout << "Умножение дробей, введите номера умножаемых дробей, через пробел, от 1 до " << Counter << ", нажмите Enter" << endl;
			cin >> first >> second;

			p_List[first - 1].Show();
			p_List[first - 1].Umnogenie( p_List[second - 1] );
			cout << ">>\t";
			p_List[first - 1].Show();

			Sleep(2000);
			system("cls");
			break;
		case '6':
			int A;
			int B;
			cout << "Деление дробей, введите номера делимых дробей, через пробел, от 1 до " << Counter << ", нажмите Enter" << endl;
			cin >> A >> B;

			p_List[A - 1].Show();
			p_List[A - 1].Delenie(p_List[B - 1]);
			cout << ">>\t";
			p_List[A - 1].Show();

			Sleep(2000);
			system("cls");
			break;
		case '7':
			int target;
			cout << "Введите индекс дроби для удаления (отсчет с нуля)\n";
			cin >> target;
			if (target>=0 && target<Counter)
			{
				cout << " Дробь "; 
				p_List[target].Show();
				cout << "удалена";
				p_List[target].Change(0, 0);
			}
			else
			{
				cout << "некоретный индекс"; 
			}

			break;
		default:
			break;
		}

		
	}
	delete[] p_List;

}





/*
Динамическое выделение памяти. +
Потоковый ввод/вывод. +
Закрытые и открытые члены класса, их отличие. +
Конструктор по умолчанию и деструктор, их назначение. +
Конструктор с параметрами.
Перегрузка конструкторов.
Использование списка инициализации. +
Статические члены класса. 

Данные-члены, типы и количество которых хорошо подходят для хранения и представления соответствующих значений. +
Конструктор по умолчанию, конструктор с параметрами (возможно, не один), конструктор копирования и деструктор. +
Методы установки значений и вывода значений на экран (использовать потоковый ввод/вывод). +
Static-счетчик количества существующих объектов класса. +
В подходящих для этого методах, используйте параметры по умолчанию. +
Используйте в конструкторах список инициализации. +

1) После разработки класса можно протестировать правильность его работы, создав в функции void main() объект разработанного класса. Проверьте правильность работы его конструкторов, вызовите методы класса, убедитесь в том, что все они работают верно.
2) Реализуйте динамическую структуру хранения объектов класса (массив указателей). При запуске программы пользователю должна предоставляться возможность указания размера массива. +
3) В программе должен присутствовать пользовательский интерфейс, в котором есть возможность выбрать любую из предоставляемых классом операцию (работа всех методов должна быть наблюдаема). +
Пользовательский интерфейс должен обеспечивать возможность:
Создание нового объекта (со значениями по умолчанию, как копия уже существующего в массиве указателей, с вводом значений) и вставку его в массив.
Просмотра содержимого всех объектов массива (предусмотреть форматированный вывод). +
Изменение содержимого объекта с заданным номером. +
Удаление объекта с заданным номером (сдвиг массива указателей учитывать не обязательно). +
Вызов любого метода для объекта с заданным номером. +
*/
